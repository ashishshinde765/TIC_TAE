{"ast":null,"code":"import _asyncToGenerator from \"G:/STE/GITHUB/TIC-TAE-TOE-GAME/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Status } from './gamestatus';\nexport class Gamelogic {\n  constructor() {\n    this.gameField = [];\n    this.winSituationsOne = [[1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1]];\n    this.winSituationsTwo = [[2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2], [2, 0, 0, 2, 0, 0, 2, 0, 0], [0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 0, 0, 2], [0, 0, 2, 0, 0, 2, 0, 0, 2], [0, 0, 2, 0, 2, 0, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 2]];\n    this.gameStatus = Status.STOP;\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  }\n\n  gameStart() {\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.currentTurn = this.randomPlayerStart();\n    console.log(this.currentTurn);\n    this.gameStatus = Status.START;\n  }\n\n  randomPlayerStart() {\n    const startPlayer = Math.floor(Math.random() * 2) + 1;\n    return startPlayer;\n  }\n\n  setField(position, value) {\n    this.gameField[position] = value;\n  }\n\n  getPlayerColorClass() {\n    const colorClass = this.currentTurn === 2 ? 'player-two' : 'player-one';\n    return colorClass;\n  }\n\n  changePlayer() {\n    this.currentTurn = this.currentTurn === 2 ? 1 : 2;\n  }\n\n  arrayEquals(a, b) {\n    return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((value, index) => value === b[index]);\n  }\n\n  checkGameEndFull() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let isWinner = false;\n      const checkarray = _this.currentTurn === 1 ? _this.winSituationsOne : _this.winSituationsTwo;\n      const currentarray = [];\n\n      _this.gameField.forEach((subfield, index) => {\n        if (subfield !== _this.currentTurn) {\n          currentarray[index] = 0;\n        } else {\n          currentarray[index] = subfield;\n        }\n      });\n\n      checkarray.forEach((checkfield, checkindex) => {\n        if (_this.arrayEquals(checkfield, currentarray)) {\n          isWinner = true;\n        }\n      });\n      console.log(currentarray);\n\n      if (_this.gameField.includes(0)) {\n        isWinner = false;\n      }\n\n      if (isWinner) {\n        console.log('Field is Completed');\n\n        _this.gameEnd();\n\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  checkGameEndFull() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let isFull = true;\n\n      if (isFull) {\n        console.log('Field is Completed');\n\n        _this2.gameEnd();\n\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  gameEnd() {\n    this.gameStatus = Status.STOP;\n  }\n\n}","map":{"version":3,"sources":["G:/STE/GITHUB/TIC-TAE-TOE-GAME/src/app/gamelogic.ts"],"names":["Status","Gamelogic","constructor","gameField","winSituationsOne","winSituationsTwo","gameStatus","STOP","gameStart","currentTurn","randomPlayerStart","console","log","START","startPlayer","Math","floor","random","setField","position","value","getPlayerColorClass","colorClass","changePlayer","arrayEquals","a","b","Array","isArray","length","every","index","checkGameEndFull","isWinner","checkarray","currentarray","forEach","subfield","checkfield","checkindex","includes","gameEnd","isFull"],"mappings":"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","sourcesContent":["import { Status } from './gamestatus';\r\nexport class Gamelogic {\r\n    constructor() {\r\n        this.gameField = [];\r\n        this.winSituationsOne = [\r\n            [1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1],\r\n            [1, 0, 0, 1, 0, 0, 1, 0, 0],\r\n            [0, 1, 0, 0, 1, 0, 0, 1, 0],\r\n            [0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n            [0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n            [0, 0, 1, 0, 1, 0, 1, 0, 0],\r\n            [1, 0, 0, 0, 1, 0, 0, 0, 1],\r\n        ];\r\n        this.winSituationsTwo = [\r\n            [2, 2, 2, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 2, 2, 2, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 2, 2, 2],\r\n            [2, 0, 0, 2, 0, 0, 2, 0, 0],\r\n            [0, 2, 0, 0, 2, 0, 0, 2, 0],\r\n            [0, 0, 2, 0, 0, 2, 0, 0, 2],\r\n            [0, 0, 2, 0, 0, 2, 0, 0, 2],\r\n            [0, 0, 2, 0, 2, 0, 2, 0, 0],\r\n            [2, 0, 0, 0, 2, 0, 0, 0, 2],\r\n        ];\r\n        this.gameStatus = Status.STOP;\r\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n    gameStart() {\r\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this.currentTurn = this.randomPlayerStart();\r\n        console.log(this.currentTurn);\r\n        this.gameStatus = Status.START;\r\n    }\r\n    randomPlayerStart() {\r\n        const startPlayer = Math.floor(Math.random() * 2) + 1;\r\n        return startPlayer;\r\n    }\r\n    setField(position, value) {\r\n        this.gameField[position] = value;\r\n    }\r\n    getPlayerColorClass() {\r\n        const colorClass = this.currentTurn === 2 ? 'player-two' : 'player-one';\r\n        return colorClass;\r\n    }\r\n    changePlayer() {\r\n        this.currentTurn = this.currentTurn === 2 ? 1 : 2;\r\n    }\r\n    arrayEquals(a, b) {\r\n        return (Array.isArray(a) &&\r\n            Array.isArray(b) &&\r\n            a.length === b.length &&\r\n            a.every((value, index) => value === b[index]));\r\n    }\r\n    async checkGameEndFull() {\r\n        let isWinner = false;\r\n        const checkarray = this.currentTurn === 1 ? this.winSituationsOne : this.winSituationsTwo;\r\n        const currentarray = [];\r\n        this.gameField.forEach((subfield, index) => {\r\n            if (subfield !== this.currentTurn) {\r\n                currentarray[index] = 0;\r\n            }\r\n            else {\r\n                currentarray[index] = subfield;\r\n            }\r\n        });\r\n        checkarray.forEach((checkfield, checkindex) => {\r\n            if (this.arrayEquals(checkfield, currentarray)) {\r\n                isWinner = true;\r\n            }\r\n        });\r\n        console.log(currentarray);\r\n        if (this.gameField.includes(0)) {\r\n            isWinner = false;\r\n        }\r\n        if (isWinner) {\r\n            console.log('Field is Completed');\r\n            this.gameEnd();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    async checkGameEndFull() {\r\n        let isFull = true;\r\n        if (isFull) {\r\n            console.log('Field is Completed');\r\n            this.gameEnd();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    gameEnd() {\r\n        this.gameStatus = Status.STOP;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}